" run pathogen.vim
execute pathogen#infect()

filetype plugin indent on  "activates filetype detection
syntax on
set syntax=perl         "forced syntax
set nu                  "display column number
set tabstop=4           "set tab length
set expandtab
set shiftwidth=4
set guioptions=em
set showtabline=2
set softtabstop=4       "tab key length
set autoindent
set smartindent
set cindent

set t_Co=256
set encoding=utf-8

"set textwidth=79
set wrapmargin=1

"set spell               "spell checking

"format of the status bar
"support for git
function CurrentGitStatus()
    let gitoutput = system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
    if len(gitoutput) > 0
        let b:gitstatus = join(["", gitoutput], ' ')
    else
        let b:gitstatus = ''
    endif
endfunc
autocmd BufEnter,BufWritePost * call CurrentGitStatus()

"get current vim mode
let g:currentmode={
    \ 'n'      : 'N ',
    \ 'no'     : 'N·Operator Pending ',
    \ 'v'      : 'V ',
    \ 'V'      : 'V·Line ',
    \ '\<C-V>' : 'V·Block ',
    \ 's'      : 'Select ',
    \ 'S'      : 'S·Line ',
    \ '\<C-S>' : 'S·Block ',
    \ 'i'      : 'I ',
    \ 'R'      : 'R ',
    \ 'Rv'     : 'V·Replace ',
    \ 'c'      : 'Command ',
    \ 'cv'     : 'Vim Ex ',
    \ 'ce'     : 'Ex ',
    \ 'r'      : 'Prompt ',
    \ 'rm'     : 'More ',
    \ 'r?'     : 'Confirm ',
    \ '!'      : 'Shell ',
    \ 't'      : 'Terminal '
    \}
" Automatically change the statusline color depending on mode
function! ChangeStatuslineColor()
  if (mode() =~# '\v(n|no)')
    exe 'hi! StatusLine ctermfg=008'
  elseif (mode() =~# '\v(v|V)' || g:currentmode[mode()] ==# 'V·Block' || get(g:currentmode, mode(), '') ==# 't')
    exe 'hi! StatusLine ctermfg=005'
  elseif (mode() ==# 'i')
    exe 'hi! StatusLine ctermfg=004'
  else
    exe 'hi! StatusLine ctermfg=006'
  endif
  return ''
endfunction
" Find out current buffer's size and output it.
function! FileSize()
  let bytes = getfsize(expand('%:p'))
  if (bytes >= 1024)
    let kbytes = bytes / 1024
  endif
  if (exists('kbytes') && kbytes >= 1000)
    let mbytes = kbytes / 1000
  endif
  if bytes <= 0
    return '0'
  endif
  if (exists('mbytes'))
    return mbytes . 'MB '
  elseif (exists('kbytes'))
    return kbytes . 'KB '
  else
    return bytes . 'B '
  endif
endfunction
function! ReadOnly()
  if &readonly || !&modifiable
    return ''
  else
    return ''
endfunction
set laststatus=2        "position of the status bar
set statusline=
set statusline+=%{ChangeStatuslineColor()}               " Changing the statusline color
set statusline+=%0*\ %{toupper(g:currentmode[mode()])}   " Current mode
set statusline+=%2*\ %{b:gitstatus}\                     " Git Branch name
set statusline+=%7*\ %<%f%{ReadOnly()}%m\                " Filename
set statusline+=%*
set statusline+=%9*\ %=                                  " Space
set statusline+=%8*\ %y\                                 " FileType
set statusline+=%7*\ %{(&fenc!=''?&fenc:&enc)}\[%{&ff}]\ " Encoding & Fileformat
set statusline+=%4*\ %-3(%{FileSize()}%)                 " File size
set statusline+=%0*\ %p%%\ %l:%c                        " Rownumber/total (%)
hi User1 ctermfg=001
hi User2 ctermfg=002 ctermbg=235
hi User3 ctermfg=003
hi User4 ctermfg=004
hi User5 ctermfg=005
hi User7 ctermfg=007 ctermbg=008
hi User8 ctermfg=057 ctermbg=008
hi User9 ctermfg=009 ctermbg=008

set hlsearch            "highlight all search entries
set ignorecase          "no case sensitivity
set smartcase           "sensitive to upper case letter in the search

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
   \| exe "normal! g'\"" | endif
endif

"au BufWinLeave * silent! mkview
"au BufWinEnter * silent! loadview

" Map ctrl-movement keys to window switching
map <C-k> <C-w><up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

" Switch to alternate file
map <C-n> :bnext<cr>
map <C-p> :bprevious<cr>

set colorcolumn=80
highlight ColorColumn ctermbg=darkgrey guibg=darkgrey
highlight Pmenu ctermfg=black
hi Search ctermbg=darkYellow

" vimdiff color scheme
highlight DiffAdd    ctermfg=0 ctermbg=2 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=italic ctermfg=9 ctermbg=15 gui=none guifg=bg guibg=Red
highlight DiffChange ctermfg=0 ctermbg=99 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=11 ctermbg=8 gui=none guifg=bg guibg=Red

" short key for Tabularize to align text
let mapleader=","
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

" for syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <C-w>e :SyntasticToggleMode<CR>: SyntasticCheck<CR>
let g:syntastic_loc_list_height=5
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_error_symbol = '❌'
let g:syntastic_style_error_symbol = '⁉️'
let g:syntastic_warning_symbol = '⚠️'
let g:syntastic_style_warning_symbol = '💩'

set list
set listchars=tab:>-,trail:·
